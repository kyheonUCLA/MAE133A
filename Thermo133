### A Pluto.jl notebook ###
# v0.19.5

using Markdown
using InteractiveUtils

# ╔═╡ 25c06110-e54d-11ec-12b7-9933d77d8497
begin
	using Unitful
	using CoolProp
end

# ╔═╡ ef214ecb-182d-47b2-b677-5c8b4d816743
# Adiabatic H2 Compressor
struct Pump 
	W::Any
	ratio::AbstractFloat
	P::Any
	T::Any
	name::AbstractString
	η::Number

end

# ╔═╡ 3e03d4eb-83ee-4a90-b037-028c96ed0071
# Isenthalpic CH4 Valve 
struct Valve
	Tin::Any
	Pin::Any
	Pex::Any
	name::AbstractString
end

# ╔═╡ 9c04b716-3018-465f-9c81-45d44d776e61
# ideal Heat Exhanger, approximate isobaric cooling
struct Cooler
	Tin::Any
	Tex::Any
	P::Any
	Tb::Any
	name::AbstractString
end

# ╔═╡ 5b466ed6-237a-4613-8071-0f6b1361f0e4
# CH4 decomposition reactor
# Reactor does no work
struct Reactor
	Tin::Any
	Tex::Any
	P::Any
	Tb::Any
end

# ╔═╡ 5fee77fc-0bb6-4e9f-a3eb-dc2019df8fae
# Assumptions
begin
	
	# Reactions is complete: CH4(g) --> 2H2(g) + C(s)
	# Isenthalpic throttling valve
	
	# Given Constants
	P_in = 1u"atm"
	T_in = 298u"K"
	P_react = 10u"kPa"
	T_tank = 300u"K"
	P_tank_min = 200u"bar"
	P_tank_max = 220u"bar"
	V_tank = 1u"m^3"
	T_pyro = 1600u"K"

	Q_solar = 15u"kW"
	H_rxn = 74.6u"kJ/mol"
	Hf_meth = -74850u"kJ/kmol"
	M_h2 = 2*1.00794u"g/mol"
	M_meth = 16.04u"g/mol"
	M_carbon = 12u"g/mol"
	C_carbon = 0.71u"J/g/K"
	R = 8.3145u"J/mol/K"
	
	MolarMass = Dict("C"=>12.01u"g/mol", "H2"=>2.02u"g/mol", "CH4"=>16.04u"g/mol")
	MODEL2 = Dict("C"=>410_260u"kJ/kmol", "H2"=>236_100u"kJ/kmol", "CH4"=>831_650u"kJ/kmol")

	## Initial Calcuations
	massH2 = 1u"kg"
	massC = 3u"kg"
	
	day = 10u"hr"
	molH2 = massH2/MolarMass["H2"]
	molC = massC/MolarMass["C"]
	molCH4 = molC
		
	MolarFlow = Dict("C"=>molC/day, "H2"=>molH2/day, "CH4"=>molC/day)
	MolarFlow["C"] = uconvert(u"mol/s", MolarFlow["C"])
	MolarFlow["H2"] = uconvert(u"mol/s", MolarFlow["H2"])
	MolarFlow["CH4"] = uconvert(u"mol/s", MolarFlow["CH4"])
end


# ╔═╡ b1d4340b-ba16-4b94-aee4-f8be5f66bf29
begin
	function temperature(pump::Pump)
		k = 1.4
		polytropicExp = (k-1)/k
		Ts = uconvert(u"K", pump.T)*(pump.ratio)^polytropicExp
		Hs = PropsSI("Hmolar", "T", Ts, "P", pump.P*pump.ratio, pump.name)
		H = PropsSI("Hmolar", "T", pump.T, "P", pump.P, pump.name)
		Hr = H + (Hs-H)/pump.η
		P2 = pump.P*pump.ratio
		T = PropsSI("T", "P", P2, "Hmolar", Hr, pump.name)
		return uconvert(u"K", T) 
	end
	
	function temperature(valve::Valve)
		Hin = PropsSI("H", "T", valve.Tin, "P", valve.Pin, valve.name)
		return uconvert(u"K", PropsSI("T", "H", Hin, "P", valve.Pex, valve.name))
	end
end

# ╔═╡ 8f5e702c-2536-4f65-ad64-f097ff63b0b6
function molar_enthalpy(T, P, name::String, Hf=0u"kJ/kmol")
	Href = PropsSI("Hmolar", "T", 298.15u"K", "P", 1u"atm", name)
	H =  PropsSI("Hmolar", "T", T, "P", P, name)
	return uconvert(u"kJ/kmol", Hf + H - Href)
end

# ╔═╡ 12cb5e29-d378-4414-9a27-1949193222d7
begin
	function heat(react::Reactor) 
		Hin = molar_enthalpy(react.Tin, react.P, "CH4", Hf_meth)
		Hex = molar_enthalpy(react.Tex, react.P, "H2")
		Q =  MolarFlow["H2"]*Hex-MolarFlow["H2"]*Hin
		return uconvert(u"kW", Q)
	end

	function heat(hx::Cooler)
		Hin = PropsSI("Hmolar", "T", hx.Tin, "P", hx.P, hx.name)
		Hex = PropsSI("Hmolar", "T", hx.Tex, "P", hx.P, hx.name)
		return uconvert(u"kJ/mol", (Hex-Hin))
	end
end

# ╔═╡ a8990746-fc7c-4264-b749-6a1b323c8ddc
function get_flow_exergy(T, P, Tₒ, Pₒ, name::String)
	Hₒ = PropsSI("Hmolar", "T", Tₒ, "P", Pₒ, name)
	Sₒ = PropsSI("Smolar", "T", Tₒ, "P", Pₒ, name)
	H = PropsSI("Hmolar", "T", T, "P", P, name)
	S = PropsSI("Smolar", "T", T, "P", P, name)
	flow = H - Hₒ - Tₒ*(S - Sₒ)
	return uconvert(u"kJ/kmol", +flow)
end

# ╔═╡ a6c2ec2a-0a42-4716-b20b-7d5f29c66ce3
begin
	function exergyDestroyed(pump::Pump, Tₒ, Pₒ)
		T = temperature(pump)
		P = pump.ratio*pump.P
		e_in = get_flow_exergy(pump.T, pump.P, Tₒ, Pₒ, pump.name)
		e_ex = get_flow_exergy(T, P, Tₒ, Pₒ, pump.name)

		Hex = PropsSI("Hmolar", "T", T, "P", P, pump.name)
		Hin = PropsSI("Hmolar", "T", pump.T, "P", pump.P, pump.name) 
		return uconvert(u"kJ/kmol", Hex-Hin + (e_in - e_ex))
	end

	function exergyDestroyed(valve::Valve, Tₒ, Pₒ)
		Tex = temperature(valve)
		e_in = get_flow_exergy(valve.Tin, valve.Pin, Tₒ, Pₒ, valve.name)
		e_ex = get_flow_exergy(Tex, valve.Pex, Tₒ, Pₒ, valve.name)
		return uconvert(u"kJ/mol", (e_in - e_ex))
	end

	function exergyDestroyed(react::Reactor, Tₒ, Pₒ)
		e_in = get_flow_exergy(react.Tin,react.P,Tₒ,Pₒ,"CH4")
		e_ex = get_flow_exergy(react.Tex,react.P,Tₒ,Pₒ,"H2")
		chem_Ex = MODEL2["CH4"] - 2*MODEL2["H2"] - MODEL2["C"]
		Q = heat(react)
		Ed = (1-Tₒ/react.Tb)*Q + MolarFlow["CH4"]*e_in-MolarFlow["H2"]*e_ex + MolarFlow["CH4"]*chem_Ex
		return uconvert(u"kW", Ed)
	end

	function exergyDestroyed(hx::Cooler, Tₒ, Pₒ)
		e_in = get_flow_exergy(hx.Tin, hx.P, Tₒ, Pₒ, hx.name)
		e_ex = get_flow_exergy(hx.Tex, hx.P, Tₒ, Pₒ, hx.name)
		Tb = (hx.Tin + hx.Tex)/2
		Q = -heat(hx)
		Ex = (1-Tₒ/Tb)*Q + e_in - e_ex
		return uconvert(u"kJ/mol", Ex)
	end
end

# ╔═╡ 4cb4afbf-188d-448f-ad14-9629cb018442
#
#
#
#

# ╔═╡ 2ade6334-af25-4aac-af9e-4cba414d07d0
ans2 = let
	ρ = PropsSI("D", "T", 273u"K", "P", 1u"atm", "CH4")
	scfm = MolarFlow["CH4"]*MolarMass["CH4"] / ρ
	uconvert(u"cm^3/minute", scfm)
end

# ╔═╡ 2f68d0fb-4df0-45bb-81bf-96d99d9c66d2
ans4 = let
	molH2 = 1u"kg"/MolarMass["H2"]
	P_H2 = molH2 * R * T_tank / V_tank
	P_final = uconvert(u"bar", P_tank_min + P_H2)
end

# ╔═╡ c0c86cbf-ae6d-4137-83b1-c76c5f3eec19
ans5 = let
	Tₒ = 298u"K"
	Pₒ = 1u"atm"
	valve = Valve(T_in, P_in, P_react, "CH4")
	Ed = uconvert(u"kW", exergyDestroyed(valve, Tₒ, Pₒ)*MolarFlow["CH4"])
end

# ╔═╡ 6af38c1a-8c85-4bbb-8e18-4c95748080c6
ans6 = let
	Tₒ = 298u"K"
	Pₒ = 1u"atm"
	Tb = 300u"K"
	Tpump = uconvert(u"K", 35u"°C")
	rxn = Reactor(Tₒ, T_pyro, P_react, Tb)
	Ed_rxn = exergyDestroyed(rxn, Tₒ, Pₒ)

	hx = Cooler(T_pyro, Tpump, P_react, Tb, "H2")
	Ed_H2 =  
	
end

# ╔═╡ 00000000-0000-0000-0000-000000000001
PLUTO_PROJECT_TOML_CONTENTS = """
[deps]
CoolProp = "e084ae63-2819-5025-826e-f8e611a84251"
Unitful = "1986cc42-f94f-5a68-af5c-568840ba703d"

[compat]
CoolProp = "~0.1.0"
Unitful = "~1.11.0"
"""

# ╔═╡ 00000000-0000-0000-0000-000000000002
PLUTO_MANIFEST_TOML_CONTENTS = """
# This file is machine-generated - editing it directly is not advised

[[ArgTools]]
uuid = "0dad84c5-d112-42e6-8d28-ef12dabb789f"

[[Artifacts]]
uuid = "56f22d72-fd6d-98f1-02f0-08ddc0907c33"

[[Base64]]
uuid = "2a0f44e3-6c83-55bd-87e4-b1978d98bd5f"

[[ConstructionBase]]
deps = ["LinearAlgebra"]
git-tree-sha1 = "f74e9d5388b8620b4cee35d4c5a618dd4dc547f4"
uuid = "187b0558-2788-49d3-abe0-74a17ed4e7c9"
version = "1.3.0"

[[CoolProp]]
deps = ["CoolProp_jll", "Markdown", "Unitful"]
git-tree-sha1 = "94062163b5656b1351f7f7a784341b8fe13c1ca1"
uuid = "e084ae63-2819-5025-826e-f8e611a84251"
version = "0.1.0"

[[CoolProp_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl", "Pkg"]
git-tree-sha1 = "1166ddeb518f330ea1708922fd8c5d1a04ec7a73"
uuid = "3351c21f-4feb-5f29-afb9-f4fcb0e27549"
version = "6.4.1+1"

[[Dates]]
deps = ["Printf"]
uuid = "ade2ca70-3891-5945-98fb-dc099432e06a"

[[Downloads]]
deps = ["ArgTools", "LibCURL", "NetworkOptions"]
uuid = "f43a241f-c20a-4ad4-852c-f6b1247861c6"

[[InteractiveUtils]]
deps = ["Markdown"]
uuid = "b77e0a4c-d291-57a0-90e8-8db25a27a240"

[[JLLWrappers]]
deps = ["Preferences"]
git-tree-sha1 = "abc9885a7ca2052a736a600f7fa66209f96506e1"
uuid = "692b3bcd-3c85-4b1f-b108-f13ce0eb3210"
version = "1.4.1"

[[LibCURL]]
deps = ["LibCURL_jll", "MozillaCACerts_jll"]
uuid = "b27032c2-a3e7-50c8-80cd-2d36dbcbfd21"

[[LibCURL_jll]]
deps = ["Artifacts", "LibSSH2_jll", "Libdl", "MbedTLS_jll", "Zlib_jll", "nghttp2_jll"]
uuid = "deac9b47-8bc7-5906-a0fe-35ac56dc84c0"

[[LibGit2]]
deps = ["Base64", "NetworkOptions", "Printf", "SHA"]
uuid = "76f85450-5226-5b5a-8eaa-529ad045b433"

[[LibSSH2_jll]]
deps = ["Artifacts", "Libdl", "MbedTLS_jll"]
uuid = "29816b5a-b9ab-546f-933c-edad1886dfa8"

[[Libdl]]
uuid = "8f399da3-3557-5675-b5ff-fb832c97cbdb"

[[LinearAlgebra]]
deps = ["Libdl"]
uuid = "37e2e46d-f89d-539d-b4ee-838fcccc9c8e"

[[Logging]]
uuid = "56ddb016-857b-54e1-b83d-db4d58db5568"

[[Markdown]]
deps = ["Base64"]
uuid = "d6f4376e-aef5-505a-96c1-9c027394607a"

[[MbedTLS_jll]]
deps = ["Artifacts", "Libdl"]
uuid = "c8ffd9c3-330d-5841-b78e-0817d7145fa1"

[[MozillaCACerts_jll]]
uuid = "14a3606d-f60d-562e-9121-12d972cd8159"

[[NetworkOptions]]
uuid = "ca575930-c2e3-43a9-ace4-1e988b2c1908"

[[Pkg]]
deps = ["Artifacts", "Dates", "Downloads", "LibGit2", "Libdl", "Logging", "Markdown", "Printf", "REPL", "Random", "SHA", "Serialization", "TOML", "Tar", "UUIDs", "p7zip_jll"]
uuid = "44cfe95a-1eb2-52ea-b672-e2afdf69b78f"

[[Preferences]]
deps = ["TOML"]
git-tree-sha1 = "47e5f437cc0e7ef2ce8406ce1e7e24d44915f88d"
uuid = "21216c6a-2e73-6563-6e65-726566657250"
version = "1.3.0"

[[Printf]]
deps = ["Unicode"]
uuid = "de0858da-6303-5e67-8744-51eddeeeb8d7"

[[REPL]]
deps = ["InteractiveUtils", "Markdown", "Sockets", "Unicode"]
uuid = "3fa0cd96-eef1-5676-8a61-b3b8758bbffb"

[[Random]]
deps = ["Serialization"]
uuid = "9a3f8284-a2c9-5f02-9a11-845980a1fd5c"

[[SHA]]
uuid = "ea8e919c-243c-51af-8825-aaa63cd721ce"

[[Serialization]]
uuid = "9e88b42a-f829-5b0c-bbe9-9e923198166b"

[[Sockets]]
uuid = "6462fe0b-24de-5631-8697-dd941f90decc"

[[TOML]]
deps = ["Dates"]
uuid = "fa267f1f-6049-4f14-aa54-33bafae1ed76"

[[Tar]]
deps = ["ArgTools", "SHA"]
uuid = "a4e569a6-e804-4fa4-b0f3-eef7a1d5b13e"

[[UUIDs]]
deps = ["Random", "SHA"]
uuid = "cf7118a7-6976-5b1a-9a39-7adc72f591a4"

[[Unicode]]
uuid = "4ec0a83e-493e-50e2-b9ac-8f72acf5a8f5"

[[Unitful]]
deps = ["ConstructionBase", "Dates", "LinearAlgebra", "Random"]
git-tree-sha1 = "b649200e887a487468b71821e2644382699f1b0f"
uuid = "1986cc42-f94f-5a68-af5c-568840ba703d"
version = "1.11.0"

[[Zlib_jll]]
deps = ["Libdl"]
uuid = "83775a58-1f1d-513f-b197-d71354ab007a"

[[nghttp2_jll]]
deps = ["Artifacts", "Libdl"]
uuid = "8e850ede-7688-5339-a07c-302acd2aaf8d"

[[p7zip_jll]]
deps = ["Artifacts", "Libdl"]
uuid = "3f19e933-33d8-53b3-aaab-bd5110c3b7a0"
"""

# ╔═╡ Cell order:
# ╠═25c06110-e54d-11ec-12b7-9933d77d8497
# ╠═ef214ecb-182d-47b2-b677-5c8b4d816743
# ╠═3e03d4eb-83ee-4a90-b037-028c96ed0071
# ╠═9c04b716-3018-465f-9c81-45d44d776e61
# ╠═5b466ed6-237a-4613-8071-0f6b1361f0e4
# ╠═5fee77fc-0bb6-4e9f-a3eb-dc2019df8fae
# ╠═b1d4340b-ba16-4b94-aee4-f8be5f66bf29
# ╠═a6c2ec2a-0a42-4716-b20b-7d5f29c66ce3
# ╠═12cb5e29-d378-4414-9a27-1949193222d7
# ╠═8f5e702c-2536-4f65-ad64-f097ff63b0b6
# ╠═a8990746-fc7c-4264-b749-6a1b323c8ddc
# ╠═4cb4afbf-188d-448f-ad14-9629cb018442
# ╠═2ade6334-af25-4aac-af9e-4cba414d07d0
# ╠═2f68d0fb-4df0-45bb-81bf-96d99d9c66d2
# ╠═c0c86cbf-ae6d-4137-83b1-c76c5f3eec19
# ╠═6af38c1a-8c85-4bbb-8e18-4c95748080c6
# ╟─00000000-0000-0000-0000-000000000001
# ╟─00000000-0000-0000-0000-000000000002
